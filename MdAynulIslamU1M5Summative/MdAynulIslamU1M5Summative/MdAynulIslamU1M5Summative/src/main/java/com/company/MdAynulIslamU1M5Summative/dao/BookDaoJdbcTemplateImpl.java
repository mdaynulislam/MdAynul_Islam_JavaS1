package com.company.MdAynulIslamU1M5Summative.dao;
import com.company.MdAynulIslamU1M5Summative.model.Book;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class BookDaoJdbcTemplateImpl implements BookDao {

    //Prepare Statement

    // add Book
    private static final String INSERT_BOOK_SQL =
            "insert into book(isbn, publish_date, author_id, title, publisher_id, price) values(?, ?, ?, ?, ?, ?)";

    //get book
    private static final String SELECT_BOOK_SQL=
            "select * from book where book_id = ?";

    //get all book
    private static final String SELECT_ALL_BOOKS_SQL=
            "select * from book";

    //update book
    private static final String UPDATE_BOOK_SQL=
            "update book set isbn = ?, publish_date = ?, author_id = ?, title = ?, publisher_id = ?, price = ? where book_id = ?";

    //delete book
    private static final String DELETE_BOOK=
            "delete from book where book_id = ?";

    // get book by author
    private static final String SELECT_BOOKS_BY_AUTHOR_ID_SQL=
            "select * from book where author_id = ?";

    private JdbcTemplate jdbcTemplate;  //injecting jdbc template to interact with the database

    @Autowired      //constructor for Jdbc
    public BookDaoJdbcTemplateImpl(JdbcTemplate newJdbcTemplate){
        this.jdbcTemplate=newJdbcTemplate;
    }

    //Mapping between row and object according to the Database Table

    private Book mapRowToBook(ResultSet rs,int rowNum) throws SQLException {

        Book book=new Book();
        book.setBookId(rs.getInt("book_id"));
        book.setIsbn(rs.getString("isbn"));
        book.setPublishDate(rs.getDate("publish_date").toLocalDate());
        book.setAuthorId(rs.getInt("author_id"));
        book.setTitle(rs.getNString("title"));
        book.setPublisherId(rs.getInt("publisher_id"));
        book.setPrice(rs.getBigDecimal("price"));

        return book;

    }

    @Override
    @Transactional  // whatever changes this method make in the Data base it will be treated as one for this annotation
    public Book addBook(Book book) {
        //don't need to add the id here because it will be generated by DB
        // the sequence should be matched with the Table
        jdbcTemplate.update(INSERT_BOOK_SQL,
                            book.getIsbn(), book.getPublishDate(),
                            book.getAuthorId(),book.getTitle(),
                            book.getPublisherId(), book.getPrice());

        // grabbing the last inserted id from data base & pass it to a declare int id
        int id=jdbcTemplate.queryForObject("select LAST_INSERT_ID()",Integer.class);
        book.setBookId(id);
        return book;
    }

    @Override
    public Book getBook(int id) {
        try {
            return jdbcTemplate.queryForObject(SELECT_BOOK_SQL, this::mapRowToBook, id); //getting the book from mapped database with an id
        } catch (EmptyResultDataAccessException e) {
            // if there is no match for this book_id, return null
            return null;
        }
    }

    @Override
    public List<Book> getAllBooks() {
        return jdbcTemplate.query(SELECT_ALL_BOOKS_SQL,this::mapRowToBook);
    }

    @Override
    public void updateBook(Book book) {
        // for the update we are passing all property values and lastly the ID
        // ID IS NEEDED
        jdbcTemplate.update(UPDATE_BOOK_SQL, book.getIsbn(), book.getPublishDate(),
                                            book.getAuthorId(),book.getTitle(),
                                            book.getPublisherId(), book.getPrice(),book.getBookId());
    }

    @Override
    public void deleteBook(int id) {
        jdbcTemplate.update(DELETE_BOOK,id);

    }

    @Override
    public List<Book> getBookByAuthor(int authorId) {
        return jdbcTemplate.query(SELECT_BOOKS_BY_AUTHOR_ID_SQL,this::mapRowToBook,authorId);
    }


}
