package com.company.MdAynulIslamU1M5Summative.dao;
import com.company.MdAynulIslamU1M5Summative.model.Publisher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;


@Repository
public class PublisherDaoJdbcTemplateImpl implements PublisherDao {

    //Prepare Statement

    // add Publisher
    private static final String INSERT_PUBLISHER_SQL =
            "insert into publisher( name, street, city, state, postal_code, phone, email) values( ?, ?, ?, ?, ?, ?, ?)";

    //get Publisher
    private static final String SELECT_PUBLISHER_SQL=
            "select * from publisher where publisher_id = ?";

    //get all Publishers
    private static final String SELECT_ALL_PUBLISHERS_SQL=
            "select * from publisher";

    //update Publisher
    private static final String UPDATE_PUBLISHER_SQL=
            "update publisher set name = ?, street = ?, city = ?, state = ?, postal_code = ?, phone = ?, email = ?  where publisher_id = ?";

    //delete Publisher
    private static final String DELETE_PUBLISHER=
            "delete from publisher where publisher_id = ?";



    private JdbcTemplate jdbcTemplate; // injecting jdbc template to interact with the database

    @Autowired // constructor for jdbc
    public PublisherDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }


    //Mapping between row and object according to the database table

    private Publisher mapRowToPublisher(ResultSet rs, int rowNum) throws SQLException {

        Publisher publisher=new Publisher();
        publisher.setPublisherId(rs.getInt("publisher_id"));
        publisher.setName(rs.getString("name"));
        publisher.setStreet(rs.getString("street"));
        publisher.setCity(rs.getString("city"));
        publisher.setState(rs.getString("state"));
        publisher.setPostalCode(rs.getString("postal_code"));
        publisher.setPhone(rs.getString("phone"));
        publisher.setEmail(rs.getString("email"));

        return publisher;
    }


    @Override
    @Transactional // whatever changes this method make in the Data base it will be treated as one for this annotation
    public Publisher addPublisher(Publisher publisher) {
        //don't need to add the id here because it will be generated by DB
        // the sequence should be matched with the Table
        jdbcTemplate.update(INSERT_PUBLISHER_SQL,
                publisher.getName(),
                publisher.getStreet(),publisher.getCity(),publisher.getState(),
                publisher.getPostalCode(), publisher.getPhone(), publisher.getEmail());

        // grabbing the last inserted id from data base & pass it to a declare int id
        int id = jdbcTemplate.queryForObject("select LAST_INSERT_ID()", Integer.class);

       publisher.setPublisherId(id);

        return publisher;

    }

    @Override
    public Publisher getPublisher(int id) {
        try {
            return jdbcTemplate.queryForObject(SELECT_PUBLISHER_SQL, this::mapRowToPublisher, id);
        } catch (EmptyResultDataAccessException e) {
            // if there is no match for this publisher_id, return null
            return null;
        }
    }

    @Override
    public List<Publisher> getAllPublishers() {
        return jdbcTemplate.query(SELECT_ALL_PUBLISHERS_SQL, this::mapRowToPublisher);
    }

    @Override
    public void updatePublisher(Publisher publisher) {
        // for the update we are passing all property values and lastly the ID
        // ID IS NEEDED
        jdbcTemplate.update(UPDATE_PUBLISHER_SQL,
                publisher.getName(),
                publisher.getStreet(),publisher.getCity(),publisher.getState(),
                publisher.getPostalCode(), publisher.getPhone(), publisher.getEmail(),publisher.getPublisherId());

    }

    @Override
    public void deletePublisher(int id) {
        jdbcTemplate.update(DELETE_PUBLISHER, id);

    }
}
