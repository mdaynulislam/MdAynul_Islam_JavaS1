package com.company.MdAynulIslamU1M5Summative.dao;
import com.company.MdAynulIslamU1M5Summative.model.Author;
import com.company.MdAynulIslamU1M5Summative.model.Book;
import com.company.MdAynulIslamU1M5Summative.model.Publisher;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
public class BookDaoTest {

    //For book authorId and publisherId is FK so we have to populate their properties first
    // @Autowired annotation tells spring to instantiate these impl class so that we can use the getters and setters and the constructor

    @Autowired
    AuthorDao authorDao;
    @Autowired
    PublisherDao publisherDao;
    @Autowired
    BookDao bookDao;

    @Before
    public void setUp() throws Exception {

        //clean up the test DB
        // The ORDER of DELETING is very important.
        // Since book is a child of publisher so we have to delete book first or else error will be thrown

        List<Book> bList = bookDao.getAllBooks();
        for (Book b : bList) {
            bookDao.deleteBook(b.getBookId());
        }

        List<Author> aList = authorDao.getAllAuthors();
        for (Author a : aList) {
            authorDao.deleteAuthor(a.getAuthorId());
        }

        List<Publisher> pList = publisherDao.getAllPublishers();
        for (Publisher p : pList) {
            publisherDao.deletePublisher(p.getPublisherId());
        }
    }

    @Test
    public void addGetDeleteBook() {
        // populating an author
        //not populating the author id because it's will be generated by DB
        Author author = new Author();
        author.setFirstName("Humayun");
        author.setLastName("Ahmed");
        author.setStreet("Kiefer Avenue");
        author.setCity("Elmont");
        author.setState("NY");
        author.setPostalCode("11423");
        author.setPhone("9292356177");
        author.setEmail("opu_hk@gmail.com");

        author = authorDao.addAuthor(author);


        //populating the publisher
        //not populating the publisher id because it's will be generated by DB

        Publisher publisher = new Publisher();

        publisher.setName("Universal");
        publisher.setStreet("Brook Lane");
        publisher.setCity("Dhaka");
        publisher.setState("DK");
        publisher.setPostalCode("1204");
        publisher.setPhone("01715523585");
        publisher.setEmail("universal_book@ub.org");

        publisher = publisherDao.addPublisher(publisher);

        //populating the book
        //not populating the book because it's will be generated by DB

        Book book = new Book();

        book.setIsbn("#1256565");
        book.setPublishDate(LocalDate.of(2010, 2, 5));
        book.setAuthorId(author.getAuthorId());
        book.setTitle("Badshai aunty");
        book.setPublisherId(publisher.getPublisherId());
        book.setPrice(new BigDecimal("25.00"));

        book = bookDao.addBook(book); // adding book with publisher and author

        Book book1 = bookDao.getBook(book.getBookId()); //passing the same book we just created in a new object book1

        assertEquals(book, book1); // comparing both book

        bookDao.deleteBook(book.getBookId()); // deleting the book we created

        book1 = bookDao.getBook(book.getBookId()); // passing the same book into another object which is should be null

        assertNull(book1);
    }


    @Test
    public void getAllBooks(){
        // need to populate author and publisher

        //populating author

        Author author = new Author();
        author.setFirstName("Humayun");
        author.setLastName("Ahmed");
        author.setStreet("Kiefer Avenue");
        author.setCity("Elmont");
        author.setState("NY");
        author.setPostalCode("11423");
        author.setPhone("9292356177");
        author.setEmail("opu_hk@gmail.com");

        author = authorDao.addAuthor(author);

        //populating the publisher

        Publisher publisher = new Publisher();

        publisher.setName("Universal");
        publisher.setStreet("Brook Lane");
        publisher.setCity("Dhaka");
        publisher.setState("DK");
        publisher.setPostalCode("1204");
        publisher.setPhone("01715523585");
        publisher.setEmail("universal_book@ub.org");

        publisher = publisherDao.addPublisher(publisher);

        //populating book--in this case creating two books with same author and publisher

        //first book
        Book book = new Book();

        book.setIsbn("#1256565");
        book.setPublishDate(LocalDate.of(2010, 2, 5));
        book.setAuthorId(author.getAuthorId());
        book.setTitle("Badshai aunty");
        book.setPublisherId(publisher.getPublisherId());
        book.setPrice(new BigDecimal("25.00"));

        book = bookDao.addBook(book);  // first book added

        //second book

         book = new Book();

        book.setIsbn("#9876543");
        book.setPublishDate(LocalDate.of(2007, 11, 9));
        book.setAuthorId(author.getAuthorId());
        book.setTitle("Misir Ali");
        book.setPublisherId(publisher.getPublisherId());
        book.setPrice(new BigDecimal("45.00"));

        book = bookDao.addBook(book);  // second book added

        List<Book> bookList=bookDao.getAllBooks(); // passing all the book into a List called bookList

        assertEquals(bookList.size(),2); // since we added two book so the size of the List will be 2
    }

    @Test
    public void updateBook() {

        // need to populate author and publisher

        //populating author

        Author author = new Author();
        author.setFirstName("Humayun");
        author.setLastName("Ahmed");
        author.setStreet("Kiefer Avenue");
        author.setCity("Elmont");
        author.setState("NY");
        author.setPostalCode("11423");
        author.setPhone("9292356177");
        author.setEmail("opu_hk@gmail.com");

        author = authorDao.addAuthor(author);

        //populating the publisher

        Publisher publisher = new Publisher();

        publisher.setName("Universal");
        publisher.setStreet("Brook Lane");
        publisher.setCity("Dhaka");
        publisher.setState("DK");
        publisher.setPostalCode("1204");
        publisher.setPhone("01715523585");
        publisher.setEmail("universal_book@ub.org");

        publisher = publisherDao.addPublisher(publisher);

        //populating book-

        Book book = new Book();

        book.setIsbn("#1256565");
        book.setPublishDate(LocalDate.of(2010, 2, 5));
        book.setAuthorId(author.getAuthorId());
        book.setTitle("Badshai aunty");
        book.setPublisherId(publisher.getPublisherId());
        book.setPrice(new BigDecimal("25.00"));

        book = bookDao.addBook(book);

        // while updating a book we don't need to update the author id and publisher id
        //just updating the other values

        book.setIsbn("#1256565");
        book.setPublishDate(LocalDate.of(2015, 2, 5));
        book.setTitle("Misir Ali");
        book.setPrice(new BigDecimal("45.00"));

         bookDao.updateBook(book);


        //creating another Book object and passed the populated book into book1 just to check

        Book book1 = bookDao.getBook(book.getBookId());

        assertEquals(book1, book);
       }

       @Test
        public void getBookByAuthor(){

           // populating an author
           //not populating the author id because it's will be generated by DB
           Author author = new Author();
           author.setFirstName("Humayun");
           author.setLastName("Ahmed");
           author.setStreet("Kiefer Avenue");
           author.setCity("Elmont");
           author.setState("NY");
           author.setPostalCode("11423");
           author.setPhone("9292356177");
           author.setEmail("opu_hk@gmail.com");

           author = authorDao.addAuthor(author);


           //populating the publisher
           //not populating the publisher id because it's will be generated by DB

           Publisher publisher = new Publisher();

           publisher.setName("Universal");
           publisher.setStreet("Brook Lane");
           publisher.setCity("Dhaka");
           publisher.setState("DK");
           publisher.setPostalCode("1204");
           publisher.setPhone("01715523585");
           publisher.setEmail("universal_book@ub.org");

           publisher = publisherDao.addPublisher(publisher);

           //populated two books with the same author and publisher

           Book book = new Book();

           book.setIsbn("#1256565");
           book.setPublishDate(LocalDate.of(2010, 2, 5));
           book.setAuthorId(author.getAuthorId());
           book.setTitle("Badshai aunty");
           book.setPublisherId(publisher.getPublisherId());
           book.setPrice(new BigDecimal("25.00"));

           book = bookDao.addBook(book); // first book added

            book = new Book();

           book.setIsbn("#9876543");
           book.setPublishDate(LocalDate.of(2007, 11, 9));
           book.setAuthorId(author.getAuthorId());
           book.setTitle("Misir Ali");
           book.setPublisherId(publisher.getPublisherId());
           book.setPrice(new BigDecimal("45.00"));

           book = bookDao.addBook(book); // second book added

           // passing the two book and grabbing the author id from the generated one

           List<Book> byAuthor=bookDao.getBookByAuthor(author.getAuthorId());
           assertEquals(byAuthor.size(),2);

       }
}




