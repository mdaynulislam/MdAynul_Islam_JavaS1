package com.company.MdAynulIslamU1M5Summative.dao;
import com.company.MdAynulIslamU1M5Summative.model.Author;
import com.company.MdAynulIslamU1M5Summative.model.Book;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.util.List;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@RunWith(SpringJUnit4ClassRunner.class) // the annotation run the test classes
@SpringBootTest
public class AuthorDaoTest {

    //For book authorId is FK so we need bookDao
    // @Autowired annotation tells spring to instantiate these impl class so that we can use the getters and setters and the constructor

    @Autowired
    AuthorDao authorDao;
    @Autowired
    BookDao bookDao;

    @Before
    public void setUp() throws Exception {

        //clean up the test DB
        // The ORDER of DELETING is very important.
        // Since book is a child of author so we have to delete book first or else error will be thrown
        List<Book> bList = bookDao.getAllBooks();
        for (Book b : bList) {
            bookDao.deleteBook(b.getBookId());
        }

        List<Author> aList = authorDao.getAllAuthors();
        for (Author a : aList) {
            authorDao.deleteAuthor(a.getAuthorId());
        }
    }

    @Test
    public void addGetDeleteAuthor(){

        // populating an author
        //not populating the author id because it's will be generated by DB
        Author author = new Author();
        author.setFirstName("Humayun");
        author.setLastName("Ahmed");
        author.setStreet("Kiefer Avenue");
        author.setCity("Elmont");
        author.setState("NY");
        author.setPostalCode("11423");
        author.setPhone("9292356177");
        author.setEmail("opu_hk@gmail.com");

        author = authorDao.addAuthor(author);

        Author author1= authorDao.getAuthor(author.getAuthorId());

        assertEquals(author1,author);

        //deleting the author
        authorDao.deleteAuthor(author.getAuthorId());
        author1=authorDao.getAuthor(author.getAuthorId());

        assertNull(author1);
    }

    @Test
    public void getAllAuthors(){

        //first author
        Author author = new Author();
        author.setFirstName("Humayun");
        author.setLastName("Ahmed");
        author.setStreet("Kiefer Avenue");
        author.setCity("Elmont");
        author.setState("NY");
        author.setPostalCode("11423");
        author.setPhone("9292356177");
        author.setEmail("opu_hk@gmail.com");

        author = authorDao.addAuthor(author); // first author added

        //second author

         author = new Author();
        author.setFirstName("Kazi");
        author.setLastName("Nazrul");
        author.setStreet("Hollis Court");
        author.setCity("HOllis");
        author.setState("NJ");
        author.setPostalCode("10567");
        author.setPhone("5645465345");
        author.setEmail("opu_hk@yahoo.com");

        author = authorDao.addAuthor(author); // second author added

        List<Author> authorList=authorDao.getAllAuthors(); // passed two author onto a List
        assertEquals(authorList.size(),2);

    }

    @Test
    public void updateAuthor(){

        //first author
        Author author = new Author();
        author.setFirstName("Humayun");
        author.setLastName("Ahmed");
        author.setStreet("Kiefer Avenue");
        author.setCity("Elmont");
        author.setState("NY");
        author.setPostalCode("11423");
        author.setPhone("9292356177");
        author.setEmail("opu_hk@gmail.com");

        author = authorDao.addAuthor(author); // added author

        //updated author

        author.setFirstName("Kazi");
        author.setLastName("Nazrul");
        author.setStreet("Hollis Court");
        author.setCity("HOllis");
        author.setState("NJ");
        author.setPostalCode("10567");
        author.setPhone("5645465345");
        author.setEmail("opu_hk@yahoo.com");

         authorDao.updateAuthor(author); // updated author

         Author author1=authorDao.getAuthor(author.getAuthorId());// passing the updated author into a new object

         assertEquals(author1,author); // comparing the updated and added

    }
}
