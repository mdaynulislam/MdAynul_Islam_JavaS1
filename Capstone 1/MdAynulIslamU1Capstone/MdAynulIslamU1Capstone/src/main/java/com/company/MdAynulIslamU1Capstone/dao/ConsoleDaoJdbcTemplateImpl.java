package com.company.MdAynulIslamU1Capstone.dao;

import com.company.MdAynulIslamU1Capstone.model.Console;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class ConsoleDaoJdbcTemplateImpl implements ConsoleDao {
    //prepare Statement

    //add console
    private static final  String INSERT_CONSOLE_SQL=
            "insert into console (model, manufacturer, memory_amount, processor, price, quantity) values(?, ?, ?, ?, ?, ?)";

    //get console
    private static final String SELECT_CONSOLE_SQL=
            "select * from console where console_id= ?";

    //get all consoles
    private static final String SELECT_ALL_CONSOLES_SQL=
            "select * from console";

    //update console
    private static final String UPDATE_CONSOLE_SQL=
            "update console set model = ?, manufacturer = ?, memory_amount = ?, processor = ?, price = ?, quantity =? where console_id = ?";

    //delete console
    private static final String DELETE_CONSOLE_SQL=
            "delete from console where console_id = ?";

    //get console by Manufacturer
    private static final String SELECT_CONSOLES_BY_MANUFACTURER_SQL=
            "select * from console where manufacturer = ?";


    private JdbcTemplate jdbcTemplate; // injecting jdbcTemplate to interact with database

    //constructor for jdbc
    @Autowired
    public ConsoleDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    //Mapping between the row and the object to the Database Table
    private Console mapToRowToConsole(ResultSet rs, int rowNum) throws SQLException {
        Console console =new Console();

        console.setConsoleId(rs.getInt("console_id"));
        console.setModel(rs.getString("model"));
        console.setManufacturer(rs.getString("manufacturer"));
        console.setMemoryAmount(rs.getString("memory_amount"));
        console.setProcessor(rs.getString("processor"));
        console.setPrice(rs.getBigDecimal("price"));
        console.setQuantity(rs.getInt("quantity"));

        return console;
    }


    @Override
    @Transactional
    public Console addConsole(Console console) {
        //No need the id it's autogenerated
        jdbcTemplate.update(INSERT_CONSOLE_SQL,
                            console.getModel(),console.getManufacturer(),
                            console.getMemoryAmount(),console.getProcessor(),
                            console.getPrice(),console.getQuantity());

        //grabbing the last inserted id from the DB
        int id=jdbcTemplate.queryForObject("select LAST_INSERT_ID()",Integer.class);
        console.setConsoleId(id); // setting the int id as console id
        return console;
    }

    @Override
    public Console getConsole(int consoleId) {

        try {
            return jdbcTemplate.queryForObject(SELECT_CONSOLE_SQL,this::mapToRowToConsole,consoleId);
        }catch (EmptyResultDataAccessException e){
            //if there is no match return null
            return null;
        }
    }

    @Override
    public List<Console> getAllConsoles() {
        return jdbcTemplate.query(SELECT_ALL_CONSOLES_SQL, this::mapToRowToConsole);
    }

    @Override
    public void updateConsole(Console console) {
        //passing all the property and lastly the Id
        jdbcTemplate.update(UPDATE_CONSOLE_SQL,console.getModel(),console.getManufacturer(),
                                                console.getMemoryAmount(),console.getProcessor(),
                                                console.getPrice(),console.getQuantity(),
                                                console.getConsoleId());
    }

    @Override
    public void deleteConsole(int consoleId) {
        jdbcTemplate.update(DELETE_CONSOLE_SQL,consoleId);

    }

    @Override
    public List<Console> getConsoleByManufacturer(String manufacturer) {
        return jdbcTemplate.query(SELECT_CONSOLES_BY_MANUFACTURER_SQL,
                this::mapToRowToConsole,manufacturer);
    }
}
