package com.company.U2M3Summative.dao;

import com.company.U2M3Summative.model.Invoice;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class InvoiceDaoJdbcTemplateImpl implements InvoiceDao {

    //prepare statement

    //add invoice
    private static final String INSERT_INVOICE_SQL=
            "insert into invoice (name, street, city, state, zipcode, item_type, item_id, unit_price, quantity, subtotal, tax, processing_fee, total) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    //get invoice
    private static final String SELECT_INVOICE_SQL=
            "select * from invoice where invoice_id = ?";

    //get all invoices
    private static String SELECT_ALL_INVOICES_SQL=
            "select * from invoice";

    //update invoice
    private static final String UPDATE_INVOICE_SQL=
            "update invoice set name = ?, street = ?, city = ?, state = ?, zipcode = ?, item_type = ?, item_id = ?, unit_price = ?, quantity = ?, subtotal = ?, tax = ?, processing_fee = ?, total = ? where invoice_id = ?";

    //delete invoice
    private static final String DELETE_INVOICE_SQL=
            "delete from invoice where invoice_id = ?";

    //injecting the jdbc template to interact with the Database
    private JdbcTemplate jdbcTemplate;

    //constructor for jdbc template
    public InvoiceDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;

    }

    //Mapping between the row and the object to the Database
    private Invoice mapToRowToInvoice(ResultSet rs, int rowNum) throws SQLException{

        Invoice invoice = new Invoice();

        invoice.setInvoiceId(rs.getInt("invoice_id"));
        invoice.setName(rs.getString("name"));
        invoice.setStreet(rs.getString("street"));
        invoice.setCity(rs.getString("city"));
        invoice.setState(rs.getString("state"));
        invoice.setZipCode(rs.getString("zipcode"));
        invoice.setItemType(rs.getString("item_type"));
        invoice.setItemId(rs.getInt("item_id"));
        invoice.setUnitPrice(rs.getBigDecimal("unit_price"));
        invoice.setQuantity(rs.getInt("quantity"));
        invoice.setSubtotal(rs.getBigDecimal("subtotal"));
        invoice.setTax(rs.getBigDecimal("tax"));
        invoice.setProcessingFee(rs.getBigDecimal("processing_fee"));
        invoice.setTotal(rs.getBigDecimal("total"));
        return invoice;

    }


    @Override
    @Transactional
    public Invoice addInvoice(Invoice invoice) {
        //No need to add id; it's auto generated by DB
        jdbcTemplate.update(INSERT_INVOICE_SQL, invoice.getName(), invoice.getStreet(),
                                                invoice.getCity(), invoice.getState(),
                                                invoice.getZipCode(), invoice.getItemType(),
                                                invoice.getItemId(),invoice.getUnitPrice(),
                                                invoice.getQuantity(),invoice.getSubtotal(),
                                                invoice.getTax(),invoice.getProcessingFee(),
                                                invoice.getTotal());
        //grabbing the last id created in DB
        int id= jdbcTemplate.queryForObject("SELECT LAST_INSERT_ID()",Integer.class);
        invoice.setInvoiceId(id); //setting the id as a invoice id
        return invoice;

    }

    @Override
    public Invoice getInvoice(int invoiceId) {
        try {
            return jdbcTemplate.queryForObject(SELECT_INVOICE_SQL,this::mapToRowToInvoice,invoiceId);
        }catch (EmptyResultDataAccessException e){
            //if no match found it will return null
            return null;
        }
    }

    @Override
    public List<Invoice> getAllInvoices() {
        return jdbcTemplate.query(SELECT_ALL_INVOICES_SQL,this::mapToRowToInvoice);
    }

    @Override
    public void updateInvoice(Invoice invoice) {
        //passing all the property of invoice and Lastly the ID
        jdbcTemplate.update(UPDATE_INVOICE_SQL,invoice.getName(), invoice.getStreet(),
                                                invoice.getCity(), invoice.getState(),
                                                invoice.getZipCode(), invoice.getItemType(),
                                                invoice.getItemId(),invoice.getUnitPrice(),
                                                invoice.getQuantity(),invoice.getSubtotal(),
                                                invoice.getTax(),invoice.getProcessingFee(),
                                                invoice.getTotal(),invoice.getInvoiceId());

    }

    @Override
    public void deleteInvoice(int invoiceId) {
        jdbcTemplate.update(DELETE_INVOICE_SQL,invoiceId);

    }
}
