package com.company.U2M3Summative.dao;

import com.company.U2M3Summative.model.TShirt;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;


@Repository
public class TShirtDaoJdbcTemplateImpl implements TShirtsDao {

    //prepare statement

    //add t shirt
    private static final String INSERT_T_SHIRT_SQL=
            "insert into t_shirt (size, color, description, price, quantity) values(?, ?, ?, ?, ?)";

    //get t shirt
    private static final String SELECT_T_SHIRT_SQL=
            "select * from t_shirt where t_shirt_id = ?";

    //get all t shirt
    private static final String SELECT_ALL_T_SHIRTS_SQL=
            "select * from t_shirt";

    //update t shirt
    private static final String UPDATE_T_SHIRT_SQL=
            "update t_shirt set size = ?, color = ?, description = ?, price = ?, quantity = ? where t_shirt_id = ?";

    //delete t shirt
    private static final String DELETE_T_SHIRT_SQL=
            "delete from t_shirt where t_shirt_id = ?";

    //get t shirt by color
    private static final String SELECT_T_SHIRT_BY_COLOR_SQL=
            "select * from t_shirt where color = ?";

    //get t shirt by size
    private static final String SELECT_T_SHIRT_BY_SIZE_SQL=
            "select * from t_shirt where size = ?";

    //injecting the jdbc to interact with the database
    private JdbcTemplate jdbcTemplate;

    //constructor for jdbc

    public TShirtDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    //Mapping between the row and the object to the Database Table

    private TShirt mapToRowToTShirt(ResultSet rs, int rowNum) throws SQLException{

        TShirt tShirt =new TShirt();
        tShirt.settShirtId(rs.getInt("t_shirt_id"));
        tShirt.setSize(rs.getString("size"));
        tShirt.setColor(rs.getString("color"));
        tShirt.setDescription(rs.getString("description"));
        tShirt.setPrice(rs.getBigDecimal("price"));
        tShirt.setQuantity(rs.getInt("quantity"));
        return tShirt;

    }

    @Override
    @Transactional
    public TShirt addTShirt(TShirt tShirt) {
        //No need to add the id; its auto generated by DB
        jdbcTemplate.update(INSERT_T_SHIRT_SQL,
                            tShirt.getSize(),tShirt.getColor(),tShirt.getDescription(),
                            tShirt.getPrice(),tShirt.getQuantity());

        //grabbing the last inserted id from DB
        int id = jdbcTemplate.queryForObject("select LAST_INSERT_ID()",Integer.class);
        tShirt.settShirtId(id);
        return tShirt;
    }

    @Override
    public TShirt getTShirt(int tShirtId) {
        try {
            return jdbcTemplate.queryForObject(SELECT_T_SHIRT_SQL,this::mapToRowToTShirt,tShirtId);
        }catch (EmptyResultDataAccessException e){
            //if there is no match then return null
            return null;
        }
    }

    @Override
    public List<TShirt> getAllTShirts() {
        return jdbcTemplate.query(SELECT_ALL_T_SHIRTS_SQL,this::mapToRowToTShirt);
    }

    @Override
    public void updateTShirt(TShirt tShirt) {
        //passing all the property lastly id
        jdbcTemplate.update(UPDATE_T_SHIRT_SQL,tShirt.getSize(),tShirt.getColor(),tShirt.getDescription(),
                                                 tShirt.getPrice(),tShirt.getQuantity(),
                                                tShirt.gettShirtId());

    }

    @Override
    public void deleteTShirt(int tShirtId) {

        jdbcTemplate.update(DELETE_T_SHIRT_SQL,tShirtId);

    }

    @Override
    public List<TShirt> getTShirtsByColor(String color) {
        return jdbcTemplate.query(SELECT_T_SHIRT_BY_COLOR_SQL,this::mapToRowToTShirt,color);
    }

    @Override
    public List<TShirt> getTShirtBySize(String size) {
        return jdbcTemplate.query(SELECT_T_SHIRT_BY_SIZE_SQL,this::mapToRowToTShirt,size);
    }
}
